// source: ServiceIM.proto3
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.CloseUserSession', null, global);
goog.exportSymbol('proto.ReceiveMsgResponse', null, global);
goog.exportSymbol('proto.SOnLine', null, global);
goog.exportSymbol('proto.SOnLine.Status', null, global);
goog.exportSymbol('proto.SOnLineReponse', null, global);
goog.exportSymbol('proto.SendMsg', null, global);
goog.exportSymbol('proto.SendMsgResponse', null, global);
goog.exportSymbol('proto.SendMsgResponse.Status', null, global);
goog.exportSymbol('proto.ServerLogin', null, global);
goog.exportSymbol('proto.ServerLoginReponse', null, global);
goog.exportSymbol('proto.ServerOffLine', null, global);
goog.exportSymbol('proto.ServiceMsg', null, global);
goog.exportSymbol('proto.ServiceMsg.ImOneofCase', null, global);
goog.exportSymbol('proto.ServiceMsg.MsgType', null, global);
goog.exportSymbol('proto.UserLogin', null, global);
goog.exportSymbol('proto.UserLoginReponse', null, global);
goog.exportSymbol('proto.UserOffLine', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ServiceMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ServiceMsg.oneofGroups_);
};
goog.inherits(proto.ServiceMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ServiceMsg.displayName = 'proto.ServiceMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UserLogin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UserLogin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.UserLogin.displayName = 'proto.UserLogin';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UserLoginReponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UserLoginReponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.UserLoginReponse.displayName = 'proto.UserLoginReponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ServerLogin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ServerLogin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ServerLogin.displayName = 'proto.ServerLogin';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ServerLoginReponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ServerLoginReponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ServerLoginReponse.displayName = 'proto.ServerLoginReponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CloseUserSession = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CloseUserSession, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CloseUserSession.displayName = 'proto.CloseUserSession';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UserOffLine = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UserOffLine, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.UserOffLine.displayName = 'proto.UserOffLine';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SOnLine = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SOnLine, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SOnLine.displayName = 'proto.SOnLine';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SOnLineReponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SOnLineReponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SOnLineReponse.displayName = 'proto.SOnLineReponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ServerOffLine = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ServerOffLine, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ServerOffLine.displayName = 'proto.ServerOffLine';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SendMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SendMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SendMsg.displayName = 'proto.SendMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SendMsgResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SendMsgResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SendMsgResponse.displayName = 'proto.SendMsgResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ReceiveMsgResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ReceiveMsgResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ReceiveMsgResponse.displayName = 'proto.ReceiveMsgResponse';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ServiceMsg.oneofGroups_ = [[2,3,4,5,6,7,8,9,10,11,12,13]];

/**
 * @enum {number}
 */
proto.ServiceMsg.ImOneofCase = {
  IM_ONEOF_NOT_SET: 0,
  USERLOGIN: 2,
  USERLOGINREPONSE: 3,
  SERVERLOGIN: 4,
  SERVERLOGINREPONSE: 5,
  CLOSEUSERSESSION: 6,
  USEROFFLINE: 7,
  SONLINE: 8,
  SONLINEREPONSE: 9,
  SENDMSG: 10,
  SENDMSGRESPONSE: 11,
  RECEIVEMSGRESPONSE: 12,
  SERVEROFFLINE: 13
};

/**
 * @return {proto.ServiceMsg.ImOneofCase}
 */
proto.ServiceMsg.prototype.getImOneofCase = function() {
  return /** @type {proto.ServiceMsg.ImOneofCase} */(jspb.Message.computeOneofCase(this, proto.ServiceMsg.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ServiceMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.ServiceMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ServiceMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServiceMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgtype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userlogin: (f = msg.getUserlogin()) && proto.UserLogin.toObject(includeInstance, f),
    userloginreponse: (f = msg.getUserloginreponse()) && proto.UserLoginReponse.toObject(includeInstance, f),
    serverlogin: (f = msg.getServerlogin()) && proto.ServerLogin.toObject(includeInstance, f),
    serverloginreponse: (f = msg.getServerloginreponse()) && proto.ServerLoginReponse.toObject(includeInstance, f),
    closeusersession: (f = msg.getCloseusersession()) && proto.CloseUserSession.toObject(includeInstance, f),
    useroffline: (f = msg.getUseroffline()) && proto.UserOffLine.toObject(includeInstance, f),
    sonline: (f = msg.getSonline()) && proto.SOnLine.toObject(includeInstance, f),
    sonlinereponse: (f = msg.getSonlinereponse()) && proto.SOnLineReponse.toObject(includeInstance, f),
    sendmsg: (f = msg.getSendmsg()) && proto.SendMsg.toObject(includeInstance, f),
    sendmsgresponse: (f = msg.getSendmsgresponse()) && proto.SendMsgResponse.toObject(includeInstance, f),
    receivemsgresponse: (f = msg.getReceivemsgresponse()) && proto.ReceiveMsgResponse.toObject(includeInstance, f),
    serveroffline: (f = msg.getServeroffline()) && proto.ServerOffLine.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ServiceMsg}
 */
proto.ServiceMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ServiceMsg;
  return proto.ServiceMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ServiceMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ServiceMsg}
 */
proto.ServiceMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ServiceMsg.MsgType} */ (reader.readEnum());
      msg.setMsgtype(value);
      break;
    case 2:
      var value = new proto.UserLogin;
      reader.readMessage(value,proto.UserLogin.deserializeBinaryFromReader);
      msg.setUserlogin(value);
      break;
    case 3:
      var value = new proto.UserLoginReponse;
      reader.readMessage(value,proto.UserLoginReponse.deserializeBinaryFromReader);
      msg.setUserloginreponse(value);
      break;
    case 4:
      var value = new proto.ServerLogin;
      reader.readMessage(value,proto.ServerLogin.deserializeBinaryFromReader);
      msg.setServerlogin(value);
      break;
    case 5:
      var value = new proto.ServerLoginReponse;
      reader.readMessage(value,proto.ServerLoginReponse.deserializeBinaryFromReader);
      msg.setServerloginreponse(value);
      break;
    case 6:
      var value = new proto.CloseUserSession;
      reader.readMessage(value,proto.CloseUserSession.deserializeBinaryFromReader);
      msg.setCloseusersession(value);
      break;
    case 7:
      var value = new proto.UserOffLine;
      reader.readMessage(value,proto.UserOffLine.deserializeBinaryFromReader);
      msg.setUseroffline(value);
      break;
    case 8:
      var value = new proto.SOnLine;
      reader.readMessage(value,proto.SOnLine.deserializeBinaryFromReader);
      msg.setSonline(value);
      break;
    case 9:
      var value = new proto.SOnLineReponse;
      reader.readMessage(value,proto.SOnLineReponse.deserializeBinaryFromReader);
      msg.setSonlinereponse(value);
      break;
    case 10:
      var value = new proto.SendMsg;
      reader.readMessage(value,proto.SendMsg.deserializeBinaryFromReader);
      msg.setSendmsg(value);
      break;
    case 11:
      var value = new proto.SendMsgResponse;
      reader.readMessage(value,proto.SendMsgResponse.deserializeBinaryFromReader);
      msg.setSendmsgresponse(value);
      break;
    case 12:
      var value = new proto.ReceiveMsgResponse;
      reader.readMessage(value,proto.ReceiveMsgResponse.deserializeBinaryFromReader);
      msg.setReceivemsgresponse(value);
      break;
    case 13:
      var value = new proto.ServerOffLine;
      reader.readMessage(value,proto.ServerOffLine.deserializeBinaryFromReader);
      msg.setServeroffline(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ServiceMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ServiceMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ServiceMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServiceMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsgtype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getUserlogin();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.UserLogin.serializeBinaryToWriter
    );
  }
  f = message.getUserloginreponse();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.UserLoginReponse.serializeBinaryToWriter
    );
  }
  f = message.getServerlogin();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ServerLogin.serializeBinaryToWriter
    );
  }
  f = message.getServerloginreponse();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.ServerLoginReponse.serializeBinaryToWriter
    );
  }
  f = message.getCloseusersession();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.CloseUserSession.serializeBinaryToWriter
    );
  }
  f = message.getUseroffline();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.UserOffLine.serializeBinaryToWriter
    );
  }
  f = message.getSonline();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.SOnLine.serializeBinaryToWriter
    );
  }
  f = message.getSonlinereponse();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.SOnLineReponse.serializeBinaryToWriter
    );
  }
  f = message.getSendmsg();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.SendMsg.serializeBinaryToWriter
    );
  }
  f = message.getSendmsgresponse();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.SendMsgResponse.serializeBinaryToWriter
    );
  }
  f = message.getReceivemsgresponse();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.ReceiveMsgResponse.serializeBinaryToWriter
    );
  }
  f = message.getServeroffline();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.ServerOffLine.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.ServiceMsg.MsgType = {
  USERLOGIN: 0,
  USERLOGINREPONSE: 1,
  SERVERLOGIN: 2,
  SERVERLOGINREPONSE: 3,
  CLOSEUSERSESSION: 4,
  USEROFFLINE: 5,
  SONLINE: 6,
  SONLINEREPONSE: 7,
  SENDMSG: 8,
  SENDMSGRESPONSE: 9,
  RECEIVEMSGRESPONSE: 10,
  SERVEROFFLINE: 11
};

/**
 * optional MsgType msgType = 1;
 * @return {!proto.ServiceMsg.MsgType}
 */
proto.ServiceMsg.prototype.getMsgtype = function() {
  return /** @type {!proto.ServiceMsg.MsgType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.ServiceMsg.MsgType} value */
proto.ServiceMsg.prototype.setMsgtype = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional UserLogin userLogin = 2;
 * @return {?proto.UserLogin}
 */
proto.ServiceMsg.prototype.getUserlogin = function() {
  return /** @type{?proto.UserLogin} */ (
    jspb.Message.getWrapperField(this, proto.UserLogin, 2));
};


/** @param {?proto.UserLogin|undefined} value */
proto.ServiceMsg.prototype.setUserlogin = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.ServiceMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.ServiceMsg.prototype.clearUserlogin = function() {
  this.setUserlogin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ServiceMsg.prototype.hasUserlogin = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional UserLoginReponse userLoginReponse = 3;
 * @return {?proto.UserLoginReponse}
 */
proto.ServiceMsg.prototype.getUserloginreponse = function() {
  return /** @type{?proto.UserLoginReponse} */ (
    jspb.Message.getWrapperField(this, proto.UserLoginReponse, 3));
};


/** @param {?proto.UserLoginReponse|undefined} value */
proto.ServiceMsg.prototype.setUserloginreponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.ServiceMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.ServiceMsg.prototype.clearUserloginreponse = function() {
  this.setUserloginreponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ServiceMsg.prototype.hasUserloginreponse = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ServerLogin serverLogin = 4;
 * @return {?proto.ServerLogin}
 */
proto.ServiceMsg.prototype.getServerlogin = function() {
  return /** @type{?proto.ServerLogin} */ (
    jspb.Message.getWrapperField(this, proto.ServerLogin, 4));
};


/** @param {?proto.ServerLogin|undefined} value */
proto.ServiceMsg.prototype.setServerlogin = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.ServiceMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.ServiceMsg.prototype.clearServerlogin = function() {
  this.setServerlogin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ServiceMsg.prototype.hasServerlogin = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ServerLoginReponse serverLoginReponse = 5;
 * @return {?proto.ServerLoginReponse}
 */
proto.ServiceMsg.prototype.getServerloginreponse = function() {
  return /** @type{?proto.ServerLoginReponse} */ (
    jspb.Message.getWrapperField(this, proto.ServerLoginReponse, 5));
};


/** @param {?proto.ServerLoginReponse|undefined} value */
proto.ServiceMsg.prototype.setServerloginreponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.ServiceMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.ServiceMsg.prototype.clearServerloginreponse = function() {
  this.setServerloginreponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ServiceMsg.prototype.hasServerloginreponse = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional CloseUserSession closeUserSession = 6;
 * @return {?proto.CloseUserSession}
 */
proto.ServiceMsg.prototype.getCloseusersession = function() {
  return /** @type{?proto.CloseUserSession} */ (
    jspb.Message.getWrapperField(this, proto.CloseUserSession, 6));
};


/** @param {?proto.CloseUserSession|undefined} value */
proto.ServiceMsg.prototype.setCloseusersession = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.ServiceMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.ServiceMsg.prototype.clearCloseusersession = function() {
  this.setCloseusersession(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ServiceMsg.prototype.hasCloseusersession = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional UserOffLine userOffLine = 7;
 * @return {?proto.UserOffLine}
 */
proto.ServiceMsg.prototype.getUseroffline = function() {
  return /** @type{?proto.UserOffLine} */ (
    jspb.Message.getWrapperField(this, proto.UserOffLine, 7));
};


/** @param {?proto.UserOffLine|undefined} value */
proto.ServiceMsg.prototype.setUseroffline = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.ServiceMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.ServiceMsg.prototype.clearUseroffline = function() {
  this.setUseroffline(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ServiceMsg.prototype.hasUseroffline = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional SOnLine sOnLine = 8;
 * @return {?proto.SOnLine}
 */
proto.ServiceMsg.prototype.getSonline = function() {
  return /** @type{?proto.SOnLine} */ (
    jspb.Message.getWrapperField(this, proto.SOnLine, 8));
};


/** @param {?proto.SOnLine|undefined} value */
proto.ServiceMsg.prototype.setSonline = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.ServiceMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.ServiceMsg.prototype.clearSonline = function() {
  this.setSonline(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ServiceMsg.prototype.hasSonline = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional SOnLineReponse sOnLineReponse = 9;
 * @return {?proto.SOnLineReponse}
 */
proto.ServiceMsg.prototype.getSonlinereponse = function() {
  return /** @type{?proto.SOnLineReponse} */ (
    jspb.Message.getWrapperField(this, proto.SOnLineReponse, 9));
};


/** @param {?proto.SOnLineReponse|undefined} value */
proto.ServiceMsg.prototype.setSonlinereponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.ServiceMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.ServiceMsg.prototype.clearSonlinereponse = function() {
  this.setSonlinereponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ServiceMsg.prototype.hasSonlinereponse = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional SendMsg sendMsg = 10;
 * @return {?proto.SendMsg}
 */
proto.ServiceMsg.prototype.getSendmsg = function() {
  return /** @type{?proto.SendMsg} */ (
    jspb.Message.getWrapperField(this, proto.SendMsg, 10));
};


/** @param {?proto.SendMsg|undefined} value */
proto.ServiceMsg.prototype.setSendmsg = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.ServiceMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.ServiceMsg.prototype.clearSendmsg = function() {
  this.setSendmsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ServiceMsg.prototype.hasSendmsg = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional SendMsgResponse sendMsgResponse = 11;
 * @return {?proto.SendMsgResponse}
 */
proto.ServiceMsg.prototype.getSendmsgresponse = function() {
  return /** @type{?proto.SendMsgResponse} */ (
    jspb.Message.getWrapperField(this, proto.SendMsgResponse, 11));
};


/** @param {?proto.SendMsgResponse|undefined} value */
proto.ServiceMsg.prototype.setSendmsgresponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.ServiceMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.ServiceMsg.prototype.clearSendmsgresponse = function() {
  this.setSendmsgresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ServiceMsg.prototype.hasSendmsgresponse = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional ReceiveMsgResponse receiveMsgResponse = 12;
 * @return {?proto.ReceiveMsgResponse}
 */
proto.ServiceMsg.prototype.getReceivemsgresponse = function() {
  return /** @type{?proto.ReceiveMsgResponse} */ (
    jspb.Message.getWrapperField(this, proto.ReceiveMsgResponse, 12));
};


/** @param {?proto.ReceiveMsgResponse|undefined} value */
proto.ServiceMsg.prototype.setReceivemsgresponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 12, proto.ServiceMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.ServiceMsg.prototype.clearReceivemsgresponse = function() {
  this.setReceivemsgresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ServiceMsg.prototype.hasReceivemsgresponse = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional ServerOffLine serverOffLine = 13;
 * @return {?proto.ServerOffLine}
 */
proto.ServiceMsg.prototype.getServeroffline = function() {
  return /** @type{?proto.ServerOffLine} */ (
    jspb.Message.getWrapperField(this, proto.ServerOffLine, 13));
};


/** @param {?proto.ServerOffLine|undefined} value */
proto.ServiceMsg.prototype.setServeroffline = function(value) {
  jspb.Message.setOneofWrapperField(this, 13, proto.ServiceMsg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.ServiceMsg.prototype.clearServeroffline = function() {
  this.setServeroffline(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ServiceMsg.prototype.hasServeroffline = function() {
  return jspb.Message.getField(this, 13) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UserLogin.prototype.toObject = function(opt_includeInstance) {
  return proto.UserLogin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UserLogin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UserLogin.toObject = function(includeInstance, msg) {
  var f, obj = {
    openid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UserLogin}
 */
proto.UserLogin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UserLogin;
  return proto.UserLogin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UserLogin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UserLogin}
 */
proto.UserLogin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOpenid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UserLogin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UserLogin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UserLogin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UserLogin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpenid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string openId = 1;
 * @return {string}
 */
proto.UserLogin.prototype.getOpenid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.UserLogin.prototype.setOpenid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UserLoginReponse.prototype.toObject = function(opt_includeInstance) {
  return proto.UserLoginReponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UserLoginReponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UserLoginReponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    openid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    username: jspb.Message.getFieldWithDefault(msg, 3, ""),
    servername: jspb.Message.getFieldWithDefault(msg, 4, ""),
    success: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    info: jspb.Message.getFieldWithDefault(msg, 6, ""),
    serviceevaluationid: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UserLoginReponse}
 */
proto.UserLoginReponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UserLoginReponse;
  return proto.UserLoginReponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UserLoginReponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UserLoginReponse}
 */
proto.UserLoginReponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOpenid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setUsername(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setServername(value);
        break;
      case 5:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 6:
        var value = /** @type {string} */ (reader.readString());
        msg.setInfo(value);
        break;
      case 7:
        var value = /** @type {string} */ (reader.readString());
        msg.setServiceevaluationid(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UserLoginReponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UserLoginReponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UserLoginReponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UserLoginReponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpenid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getServername();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getInfo();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getServiceevaluationid();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string openId = 1;
 * @return {string}
 */
proto.UserLoginReponse.prototype.getOpenid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.UserLoginReponse.prototype.setOpenid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string userId = 2;
 * @return {string}
 */
proto.UserLoginReponse.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.UserLoginReponse.prototype.setUserid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string userName = 3;
 * @return {string}
 */
proto.UserLoginReponse.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.UserLoginReponse.prototype.setUsername = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string serverName = 4;
 * @return {string}
 */
proto.UserLoginReponse.prototype.getServername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.UserLoginReponse.prototype.setServername = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool success = 5;
 * @return {boolean}
 */
proto.UserLoginReponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.UserLoginReponse.prototype.setSuccess = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional string info = 6;
 * @return {string}
 */
proto.UserLoginReponse.prototype.getInfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.UserLoginReponse.prototype.setInfo = function (value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string serviceEvaluationId = 7;
 * @return {string}
 */
proto.UserLoginReponse.prototype.getServiceevaluationid = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.UserLoginReponse.prototype.setServiceevaluationid = function (value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.ServerLogin.prototype.toObject = function (opt_includeInstance) {
    return proto.ServerLogin.toObject(opt_includeInstance, this);
  };


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ServerLogin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerLogin.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ServerLogin}
 */
proto.ServerLogin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ServerLogin;
  return proto.ServerLogin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ServerLogin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ServerLogin}
 */
proto.ServerLogin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ServerLogin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ServerLogin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ServerLogin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerLogin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string userId = 1;
 * @return {string}
 */
proto.ServerLogin.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ServerLogin.prototype.setUserid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ServerLoginReponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ServerLoginReponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ServerLoginReponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerLoginReponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    info: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ServerLoginReponse}
 */
proto.ServerLoginReponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ServerLoginReponse;
  return proto.ServerLoginReponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ServerLoginReponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ServerLoginReponse}
 */
proto.ServerLoginReponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ServerLoginReponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ServerLoginReponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ServerLoginReponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerLoginReponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getInfo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.ServerLoginReponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.ServerLoginReponse.prototype.setSuccess = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string info = 2;
 * @return {string}
 */
proto.ServerLoginReponse.prototype.getInfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ServerLoginReponse.prototype.setInfo = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CloseUserSession.prototype.toObject = function(opt_includeInstance) {
  return proto.CloseUserSession.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CloseUserSession} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CloseUserSession.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CloseUserSession}
 */
proto.CloseUserSession.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CloseUserSession;
  return proto.CloseUserSession.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CloseUserSession} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CloseUserSession}
 */
proto.CloseUserSession.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CloseUserSession.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CloseUserSession.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CloseUserSession} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CloseUserSession.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string userId = 1;
 * @return {string}
 */
proto.CloseUserSession.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.CloseUserSession.prototype.setUserid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UserOffLine.prototype.toObject = function(opt_includeInstance) {
  return proto.UserOffLine.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UserOffLine} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UserOffLine.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    info: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UserOffLine}
 */
proto.UserOffLine.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UserOffLine;
  return proto.UserOffLine.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UserOffLine} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UserOffLine}
 */
proto.UserOffLine.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UserOffLine.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UserOffLine.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UserOffLine} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UserOffLine.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInfo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string userId = 1;
 * @return {string}
 */
proto.UserOffLine.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.UserOffLine.prototype.setUserid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string info = 2;
 * @return {string}
 */
proto.UserOffLine.prototype.getInfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.UserOffLine.prototype.setInfo = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SOnLine.prototype.toObject = function(opt_includeInstance) {
  return proto.SOnLine.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SOnLine} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SOnLine.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SOnLine}
 */
proto.SOnLine.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SOnLine;
  return proto.SOnLine.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SOnLine} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SOnLine}
 */
proto.SOnLine.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!proto.SOnLine.Status} */ (reader.readEnum());
        msg.setStatus(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SOnLine.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SOnLine.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SOnLine} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SOnLine.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.SOnLine.Status = {
  ONLINE: 0,
  DOWNLINE: 1,
  BUSYANDONLINE: 2
};

/**
 * optional Status status = 1;
 * @return {!proto.SOnLine.Status}
 */
proto.SOnLine.prototype.getStatus = function () {
  return /** @type {!proto.SOnLine.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.SOnLine.Status} value */
proto.SOnLine.prototype.setStatus = function (value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SOnLineReponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SOnLineReponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SOnLineReponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SOnLineReponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    info: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SOnLineReponse}
 */
proto.SOnLineReponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SOnLineReponse;
  return proto.SOnLineReponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SOnLineReponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SOnLineReponse}
 */
proto.SOnLineReponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SOnLineReponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SOnLineReponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SOnLineReponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SOnLineReponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getInfo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.SOnLineReponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.SOnLineReponse.prototype.setSuccess = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string info = 2;
 * @return {string}
 */
proto.SOnLineReponse.prototype.getInfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.SOnLineReponse.prototype.setInfo = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ServerOffLine.prototype.toObject = function(opt_includeInstance) {
  return proto.ServerOffLine.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ServerOffLine} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerOffLine.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    info: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ServerOffLine}
 */
proto.ServerOffLine.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ServerOffLine;
  return proto.ServerOffLine.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ServerOffLine} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ServerOffLine}
 */
proto.ServerOffLine.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ServerOffLine.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ServerOffLine.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ServerOffLine} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerOffLine.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getInfo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 type = 1;
 * @return {number}
 */
proto.ServerOffLine.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ServerOffLine.prototype.setType = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string info = 2;
 * @return {string}
 */
proto.ServerOffLine.prototype.getInfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ServerOffLine.prototype.setInfo = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SendMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.SendMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SendMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SendMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    clientuuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    fromuserid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    fromusername: jspb.Message.getFieldWithDefault(msg, 4, ""),
    touserid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    tousername: jspb.Message.getFieldWithDefault(msg, 6, ""),
    sendmsg: jspb.Message.getFieldWithDefault(msg, 7, ""),
    createtime: jspb.Message.getFieldWithDefault(msg, 8, ""),
    sendtype: jspb.Message.getFieldWithDefault(msg, 9, 0),
    direction: jspb.Message.getFieldWithDefault(msg, 10, 0),
    wxheadurl: jspb.Message.getFieldWithDefault(msg, 11, ""),
    type: jspb.Message.getFieldWithDefault(msg, 12, 0),
    serviceevaluationid: jspb.Message.getFieldWithDefault(msg, 13, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SendMsg}
 */
proto.SendMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SendMsg;
  return proto.SendMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SendMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SendMsg}
 */
proto.SendMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientuuid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromuserid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromusername(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTouserid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTousername(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSendmsg(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatetime(value);
      break;
      case 9:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setSendtype(value);
        break;
      case 10:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setDirection(value);
        break;
      case 11:
        var value = /** @type {string} */ (reader.readString());
        msg.setWxheadurl(value);
        break;
      case 12:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setType(value);
        break;
      case 13:
        var value = /** @type {string} */ (reader.readString());
        msg.setServiceevaluationid(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SendMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SendMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SendMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SendMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClientuuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFromuserid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFromusername();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTouserid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTousername();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getSendmsg();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getCreatetime();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getSendtype();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getDirection();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getWxheadurl();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getServiceevaluationid();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.SendMsg.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.SendMsg.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string clientUUId = 2;
 * @return {string}
 */
proto.SendMsg.prototype.getClientuuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.SendMsg.prototype.setClientuuid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string fromUserId = 3;
 * @return {string}
 */
proto.SendMsg.prototype.getFromuserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.SendMsg.prototype.setFromuserid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string fromUserName = 4;
 * @return {string}
 */
proto.SendMsg.prototype.getFromusername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.SendMsg.prototype.setFromusername = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string toUserId = 5;
 * @return {string}
 */
proto.SendMsg.prototype.getTouserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.SendMsg.prototype.setTouserid = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string toUserName = 6;
 * @return {string}
 */
proto.SendMsg.prototype.getTousername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.SendMsg.prototype.setTousername = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string sendMsg = 7;
 * @return {string}
 */
proto.SendMsg.prototype.getSendmsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.SendMsg.prototype.setSendmsg = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string createTime = 8;
 * @return {string}
 */
proto.SendMsg.prototype.getCreatetime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.SendMsg.prototype.setCreatetime = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional int32 sendType = 9;
 * @return {number}
 */
proto.SendMsg.prototype.getSendtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.SendMsg.prototype.setSendtype = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 direction = 10;
 * @return {number}
 */
proto.SendMsg.prototype.getDirection = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.SendMsg.prototype.setDirection = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional string wxheadurl = 11;
 * @return {string}
 */
proto.SendMsg.prototype.getWxheadurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.SendMsg.prototype.setWxheadurl = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional int32 type = 12;
 * @return {number}
 */
proto.SendMsg.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.SendMsg.prototype.setType = function (value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional string serviceEvaluationId = 13;
 * @return {string}
 */
proto.SendMsg.prototype.getServiceevaluationid = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.SendMsg.prototype.setServiceevaluationid = function (value) {
  jspb.Message.setProto3StringField(this, 13, value);
};


if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.SendMsgResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.SendMsgResponse.toObject(opt_includeInstance, this);
  };


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SendMsgResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SendMsgResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    clientuuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    userid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    createtime: jspb.Message.getFieldWithDefault(msg, 4, ""),
    status: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SendMsgResponse}
 */
proto.SendMsgResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SendMsgResponse;
  return proto.SendMsgResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SendMsgResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SendMsgResponse}
 */
proto.SendMsgResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientuuid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatetime(value);
      break;
    case 5:
      var value = /** @type {!proto.SendMsgResponse.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SendMsgResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SendMsgResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SendMsgResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SendMsgResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClientuuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCreatetime();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.SendMsgResponse.Status = {
  SUCCESS: 0,
  RELOGIN: 1,
  REJECT: 2
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.SendMsgResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.SendMsgResponse.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string clientUUId = 2;
 * @return {string}
 */
proto.SendMsgResponse.prototype.getClientuuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.SendMsgResponse.prototype.setClientuuid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string userId = 3;
 * @return {string}
 */
proto.SendMsgResponse.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.SendMsgResponse.prototype.setUserid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string createTime = 4;
 * @return {string}
 */
proto.SendMsgResponse.prototype.getCreatetime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.SendMsgResponse.prototype.setCreatetime = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional Status status = 5;
 * @return {!proto.SendMsgResponse.Status}
 */
proto.SendMsgResponse.prototype.getStatus = function() {
  return /** @type {!proto.SendMsgResponse.Status} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.SendMsgResponse.Status} value */
proto.SendMsgResponse.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ReceiveMsgResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ReceiveMsgResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ReceiveMsgResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReceiveMsgResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ReceiveMsgResponse}
 */
proto.ReceiveMsgResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ReceiveMsgResponse;
  return proto.ReceiveMsgResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ReceiveMsgResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ReceiveMsgResponse}
 */
proto.ReceiveMsgResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ReceiveMsgResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ReceiveMsgResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ReceiveMsgResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReceiveMsgResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ReceiveMsgResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ReceiveMsgResponse.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto);
