// source: ImServerProto.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.com.ht.imconsumer.ImLogin', null, global);
goog.exportSymbol('proto.com.ht.imconsumer.ImMessageAck', null, global);
goog.exportSymbol('proto.com.ht.imconsumer.ImMessagePull', null, global);
goog.exportSymbol('proto.com.ht.imconsumer.ImMessagePush', null, global);
goog.exportSymbol('proto.com.ht.imconsumer.ImMessageToQueue', null, global);
goog.exportSymbol('proto.com.ht.imconsumer.ImServerMessage', null, global);
goog.exportSymbol('proto.com.ht.imconsumer.ImServerMessage.ImOneofCase', null, global);
goog.exportSymbol('proto.com.ht.imconsumer.ImServerMessage.MsgType', null, global);
goog.exportSymbol('proto.com.ht.imconsumer.ImServerResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.ht.imconsumer.ImServerMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.com.ht.imconsumer.ImServerMessage.oneofGroups_);
};
goog.inherits(proto.com.ht.imconsumer.ImServerMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.ht.imconsumer.ImServerMessage.displayName = 'proto.com.ht.imconsumer.ImServerMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.ht.imconsumer.ImLogin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.ht.imconsumer.ImLogin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.ht.imconsumer.ImLogin.displayName = 'proto.com.ht.imconsumer.ImLogin';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.ht.imconsumer.ImServerResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.ht.imconsumer.ImServerResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.ht.imconsumer.ImServerResponse.displayName = 'proto.com.ht.imconsumer.ImServerResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.ht.imconsumer.ImMessagePush = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.ht.imconsumer.ImMessagePush, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.ht.imconsumer.ImMessagePush.displayName = 'proto.com.ht.imconsumer.ImMessagePush';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.ht.imconsumer.ImMessageAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.ht.imconsumer.ImMessageAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.ht.imconsumer.ImMessageAck.displayName = 'proto.com.ht.imconsumer.ImMessageAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.ht.imconsumer.ImMessagePull = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.ht.imconsumer.ImMessagePull, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.ht.imconsumer.ImMessagePull.displayName = 'proto.com.ht.imconsumer.ImMessagePull';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.ht.imconsumer.ImMessageToQueue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.ht.imconsumer.ImMessageToQueue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.ht.imconsumer.ImMessageToQueue.displayName = 'proto.com.ht.imconsumer.ImMessageToQueue';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.com.ht.imconsumer.ImServerMessage.oneofGroups_ = [[2,3,4,5,6,7]];

/**
 * @enum {number}
 */
proto.com.ht.imconsumer.ImServerMessage.ImOneofCase = {
  IM_ONEOF_NOT_SET: 0,
  IMLOGIN: 2,
  IMSERVERRESPONSE: 3,
  IMMESSAGEPUSH: 4,
  IMMESSAGEACK: 5,
  IMMESSAGEPULL: 6,
  IMMESSAGETOQUEUE: 7
};

/**
 * @return {proto.com.ht.imconsumer.ImServerMessage.ImOneofCase}
 */
proto.com.ht.imconsumer.ImServerMessage.prototype.getImOneofCase = function() {
  return /** @type {proto.com.ht.imconsumer.ImServerMessage.ImOneofCase} */(jspb.Message.computeOneofCase(this, proto.com.ht.imconsumer.ImServerMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.ht.imconsumer.ImServerMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.com.ht.imconsumer.ImServerMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.ht.imconsumer.ImServerMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.ht.imconsumer.ImServerMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgtype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    imlogin: (f = msg.getImlogin()) && proto.com.ht.imconsumer.ImLogin.toObject(includeInstance, f),
    imserverresponse: (f = msg.getImserverresponse()) && proto.com.ht.imconsumer.ImServerResponse.toObject(includeInstance, f),
    immessagepush: (f = msg.getImmessagepush()) && proto.com.ht.imconsumer.ImMessagePush.toObject(includeInstance, f),
    immessageack: (f = msg.getImmessageack()) && proto.com.ht.imconsumer.ImMessageAck.toObject(includeInstance, f),
    immessagepull: (f = msg.getImmessagepull()) && proto.com.ht.imconsumer.ImMessagePull.toObject(includeInstance, f),
    immessagetoqueue: (f = msg.getImmessagetoqueue()) && proto.com.ht.imconsumer.ImMessageToQueue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.ht.imconsumer.ImServerMessage}
 */
proto.com.ht.imconsumer.ImServerMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.ht.imconsumer.ImServerMessage;
  return proto.com.ht.imconsumer.ImServerMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.ht.imconsumer.ImServerMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.ht.imconsumer.ImServerMessage}
 */
proto.com.ht.imconsumer.ImServerMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.com.ht.imconsumer.ImServerMessage.MsgType} */ (reader.readEnum());
      msg.setMsgtype(value);
      break;
    case 2:
      var value = new proto.com.ht.imconsumer.ImLogin;
      reader.readMessage(value,proto.com.ht.imconsumer.ImLogin.deserializeBinaryFromReader);
      msg.setImlogin(value);
      break;
    case 3:
      var value = new proto.com.ht.imconsumer.ImServerResponse;
      reader.readMessage(value,proto.com.ht.imconsumer.ImServerResponse.deserializeBinaryFromReader);
      msg.setImserverresponse(value);
      break;
    case 4:
      var value = new proto.com.ht.imconsumer.ImMessagePush;
      reader.readMessage(value,proto.com.ht.imconsumer.ImMessagePush.deserializeBinaryFromReader);
      msg.setImmessagepush(value);
      break;
    case 5:
      var value = new proto.com.ht.imconsumer.ImMessageAck;
      reader.readMessage(value,proto.com.ht.imconsumer.ImMessageAck.deserializeBinaryFromReader);
      msg.setImmessageack(value);
      break;
    case 6:
      var value = new proto.com.ht.imconsumer.ImMessagePull;
      reader.readMessage(value,proto.com.ht.imconsumer.ImMessagePull.deserializeBinaryFromReader);
      msg.setImmessagepull(value);
      break;
    case 7:
      var value = new proto.com.ht.imconsumer.ImMessageToQueue;
      reader.readMessage(value,proto.com.ht.imconsumer.ImMessageToQueue.deserializeBinaryFromReader);
      msg.setImmessagetoqueue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.ht.imconsumer.ImServerMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.ht.imconsumer.ImServerMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.ht.imconsumer.ImServerMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.ht.imconsumer.ImServerMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsgtype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getImlogin();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.com.ht.imconsumer.ImLogin.serializeBinaryToWriter
    );
  }
  f = message.getImserverresponse();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.com.ht.imconsumer.ImServerResponse.serializeBinaryToWriter
    );
  }
  f = message.getImmessagepush();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.com.ht.imconsumer.ImMessagePush.serializeBinaryToWriter
    );
  }
  f = message.getImmessageack();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.com.ht.imconsumer.ImMessageAck.serializeBinaryToWriter
    );
  }
  f = message.getImmessagepull();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.com.ht.imconsumer.ImMessagePull.serializeBinaryToWriter
    );
  }
  f = message.getImmessagetoqueue();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.com.ht.imconsumer.ImMessageToQueue.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.com.ht.imconsumer.ImServerMessage.MsgType = {
  IMLOGIN: 0,
  IMSERVERRESPONSE: 1,
  IMMESSAGEPUSH: 2,
  IMMESSAGEACK: 3,
  IMMESSAGEPULL: 4,
  IMMESSAGETOQUEUE: 5
};

/**
 * optional MsgType msgType = 1;
 * @return {!proto.com.ht.imconsumer.ImServerMessage.MsgType}
 */
proto.com.ht.imconsumer.ImServerMessage.prototype.getMsgtype = function() {
  return /** @type {!proto.com.ht.imconsumer.ImServerMessage.MsgType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.com.ht.imconsumer.ImServerMessage.MsgType} value
 * @return {!proto.com.ht.imconsumer.ImServerMessage} returns this
 */
proto.com.ht.imconsumer.ImServerMessage.prototype.setMsgtype = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional ImLogin imLogin = 2;
 * @return {?proto.com.ht.imconsumer.ImLogin}
 */
proto.com.ht.imconsumer.ImServerMessage.prototype.getImlogin = function() {
  return /** @type{?proto.com.ht.imconsumer.ImLogin} */ (
    jspb.Message.getWrapperField(this, proto.com.ht.imconsumer.ImLogin, 2));
};


/**
 * @param {?proto.com.ht.imconsumer.ImLogin|undefined} value
 * @return {!proto.com.ht.imconsumer.ImServerMessage} returns this
*/
proto.com.ht.imconsumer.ImServerMessage.prototype.setImlogin = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.com.ht.imconsumer.ImServerMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.ht.imconsumer.ImServerMessage} returns this
 */
proto.com.ht.imconsumer.ImServerMessage.prototype.clearImlogin = function() {
  return this.setImlogin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.ht.imconsumer.ImServerMessage.prototype.hasImlogin = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ImServerResponse imServerResponse = 3;
 * @return {?proto.com.ht.imconsumer.ImServerResponse}
 */
proto.com.ht.imconsumer.ImServerMessage.prototype.getImserverresponse = function() {
  return /** @type{?proto.com.ht.imconsumer.ImServerResponse} */ (
    jspb.Message.getWrapperField(this, proto.com.ht.imconsumer.ImServerResponse, 3));
};


/**
 * @param {?proto.com.ht.imconsumer.ImServerResponse|undefined} value
 * @return {!proto.com.ht.imconsumer.ImServerMessage} returns this
*/
proto.com.ht.imconsumer.ImServerMessage.prototype.setImserverresponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.com.ht.imconsumer.ImServerMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.ht.imconsumer.ImServerMessage} returns this
 */
proto.com.ht.imconsumer.ImServerMessage.prototype.clearImserverresponse = function() {
  return this.setImserverresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.ht.imconsumer.ImServerMessage.prototype.hasImserverresponse = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ImMessagePush imMessagePush = 4;
 * @return {?proto.com.ht.imconsumer.ImMessagePush}
 */
proto.com.ht.imconsumer.ImServerMessage.prototype.getImmessagepush = function() {
  return /** @type{?proto.com.ht.imconsumer.ImMessagePush} */ (
    jspb.Message.getWrapperField(this, proto.com.ht.imconsumer.ImMessagePush, 4));
};


/**
 * @param {?proto.com.ht.imconsumer.ImMessagePush|undefined} value
 * @return {!proto.com.ht.imconsumer.ImServerMessage} returns this
*/
proto.com.ht.imconsumer.ImServerMessage.prototype.setImmessagepush = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.com.ht.imconsumer.ImServerMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.ht.imconsumer.ImServerMessage} returns this
 */
proto.com.ht.imconsumer.ImServerMessage.prototype.clearImmessagepush = function() {
  return this.setImmessagepush(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.ht.imconsumer.ImServerMessage.prototype.hasImmessagepush = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ImMessageAck imMessageAck = 5;
 * @return {?proto.com.ht.imconsumer.ImMessageAck}
 */
proto.com.ht.imconsumer.ImServerMessage.prototype.getImmessageack = function() {
  return /** @type{?proto.com.ht.imconsumer.ImMessageAck} */ (
    jspb.Message.getWrapperField(this, proto.com.ht.imconsumer.ImMessageAck, 5));
};


/**
 * @param {?proto.com.ht.imconsumer.ImMessageAck|undefined} value
 * @return {!proto.com.ht.imconsumer.ImServerMessage} returns this
*/
proto.com.ht.imconsumer.ImServerMessage.prototype.setImmessageack = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.com.ht.imconsumer.ImServerMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.ht.imconsumer.ImServerMessage} returns this
 */
proto.com.ht.imconsumer.ImServerMessage.prototype.clearImmessageack = function() {
  return this.setImmessageack(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.ht.imconsumer.ImServerMessage.prototype.hasImmessageack = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ImMessagePull imMessagePull = 6;
 * @return {?proto.com.ht.imconsumer.ImMessagePull}
 */
proto.com.ht.imconsumer.ImServerMessage.prototype.getImmessagepull = function() {
  return /** @type{?proto.com.ht.imconsumer.ImMessagePull} */ (
    jspb.Message.getWrapperField(this, proto.com.ht.imconsumer.ImMessagePull, 6));
};


/**
 * @param {?proto.com.ht.imconsumer.ImMessagePull|undefined} value
 * @return {!proto.com.ht.imconsumer.ImServerMessage} returns this
*/
proto.com.ht.imconsumer.ImServerMessage.prototype.setImmessagepull = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.com.ht.imconsumer.ImServerMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.ht.imconsumer.ImServerMessage} returns this
 */
proto.com.ht.imconsumer.ImServerMessage.prototype.clearImmessagepull = function() {
  return this.setImmessagepull(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.ht.imconsumer.ImServerMessage.prototype.hasImmessagepull = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ImMessageToQueue imMessageToQueue = 7;
 * @return {?proto.com.ht.imconsumer.ImMessageToQueue}
 */
proto.com.ht.imconsumer.ImServerMessage.prototype.getImmessagetoqueue = function() {
  return /** @type{?proto.com.ht.imconsumer.ImMessageToQueue} */ (
    jspb.Message.getWrapperField(this, proto.com.ht.imconsumer.ImMessageToQueue, 7));
};


/**
 * @param {?proto.com.ht.imconsumer.ImMessageToQueue|undefined} value
 * @return {!proto.com.ht.imconsumer.ImServerMessage} returns this
*/
proto.com.ht.imconsumer.ImServerMessage.prototype.setImmessagetoqueue = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.com.ht.imconsumer.ImServerMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.ht.imconsumer.ImServerMessage} returns this
 */
proto.com.ht.imconsumer.ImServerMessage.prototype.clearImmessagetoqueue = function() {
  return this.setImmessagetoqueue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.ht.imconsumer.ImServerMessage.prototype.hasImmessagetoqueue = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.ht.imconsumer.ImLogin.prototype.toObject = function(opt_includeInstance) {
  return proto.com.ht.imconsumer.ImLogin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.ht.imconsumer.ImLogin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.ht.imconsumer.ImLogin.toObject = function(includeInstance, msg) {
  var f, obj = {
    jwttoken: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.ht.imconsumer.ImLogin}
 */
proto.com.ht.imconsumer.ImLogin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.ht.imconsumer.ImLogin;
  return proto.com.ht.imconsumer.ImLogin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.ht.imconsumer.ImLogin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.ht.imconsumer.ImLogin}
 */
proto.com.ht.imconsumer.ImLogin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setJwttoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.ht.imconsumer.ImLogin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.ht.imconsumer.ImLogin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.ht.imconsumer.ImLogin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.ht.imconsumer.ImLogin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJwttoken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string jwtToken = 1;
 * @return {string}
 */
proto.com.ht.imconsumer.ImLogin.prototype.getJwttoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.ht.imconsumer.ImLogin} returns this
 */
proto.com.ht.imconsumer.ImLogin.prototype.setJwttoken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.ht.imconsumer.ImServerResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.com.ht.imconsumer.ImServerResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.ht.imconsumer.ImServerResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.ht.imconsumer.ImServerResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.ht.imconsumer.ImServerResponse}
 */
proto.com.ht.imconsumer.ImServerResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.ht.imconsumer.ImServerResponse;
  return proto.com.ht.imconsumer.ImServerResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.ht.imconsumer.ImServerResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.ht.imconsumer.ImServerResponse}
 */
proto.com.ht.imconsumer.ImServerResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.ht.imconsumer.ImServerResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.ht.imconsumer.ImServerResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.ht.imconsumer.ImServerResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.ht.imconsumer.ImServerResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 type = 1;
 * @return {number}
 */
proto.com.ht.imconsumer.ImServerResponse.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.ht.imconsumer.ImServerResponse} returns this
 */
proto.com.ht.imconsumer.ImServerResponse.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.com.ht.imconsumer.ImServerResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.ht.imconsumer.ImServerResponse} returns this
 */
proto.com.ht.imconsumer.ImServerResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.ht.imconsumer.ImMessagePush.prototype.toObject = function(opt_includeInstance) {
  return proto.com.ht.imconsumer.ImMessagePush.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.ht.imconsumer.ImMessagePush} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.ht.imconsumer.ImMessagePush.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    senduserid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sendusername: jspb.Message.getFieldWithDefault(msg, 3, ""),
    senduserheadurl: jspb.Message.getFieldWithDefault(msg, 4, ""),
    touserid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    tousername: jspb.Message.getFieldWithDefault(msg, 6, ""),
    touserheadurl: jspb.Message.getFieldWithDefault(msg, 7, ""),
    targettype: jspb.Message.getFieldWithDefault(msg, 8, 0),
    targetid: jspb.Message.getFieldWithDefault(msg, 9, ""),
    content: jspb.Message.getFieldWithDefault(msg, 10, ""),
    messagetype: jspb.Message.getFieldWithDefault(msg, 11, 0),
    sendtimestamp: jspb.Message.getFieldWithDefault(msg, 12, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.ht.imconsumer.ImMessagePush}
 */
proto.com.ht.imconsumer.ImMessagePush.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.ht.imconsumer.ImMessagePush;
  return proto.com.ht.imconsumer.ImMessagePush.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.ht.imconsumer.ImMessagePush} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.ht.imconsumer.ImMessagePush}
 */
proto.com.ht.imconsumer.ImMessagePush.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSenduserid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSendusername(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSenduserheadurl(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTouserid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTousername(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setTouserheadurl(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTargettype(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetid(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMessagetype(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setSendtimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.ht.imconsumer.ImMessagePush.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.ht.imconsumer.ImMessagePush.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.ht.imconsumer.ImMessagePush} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.ht.imconsumer.ImMessagePush.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSenduserid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSendusername();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSenduserheadurl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTouserid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTousername();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getTouserheadurl();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getTargettype();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getTargetid();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getMessagetype();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getSendtimestamp();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.com.ht.imconsumer.ImMessagePush.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.ht.imconsumer.ImMessagePush} returns this
 */
proto.com.ht.imconsumer.ImMessagePush.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string sendUserId = 2;
 * @return {string}
 */
proto.com.ht.imconsumer.ImMessagePush.prototype.getSenduserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.ht.imconsumer.ImMessagePush} returns this
 */
proto.com.ht.imconsumer.ImMessagePush.prototype.setSenduserid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string sendUserName = 3;
 * @return {string}
 */
proto.com.ht.imconsumer.ImMessagePush.prototype.getSendusername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.ht.imconsumer.ImMessagePush} returns this
 */
proto.com.ht.imconsumer.ImMessagePush.prototype.setSendusername = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string sendUserHeadUrl = 4;
 * @return {string}
 */
proto.com.ht.imconsumer.ImMessagePush.prototype.getSenduserheadurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.ht.imconsumer.ImMessagePush} returns this
 */
proto.com.ht.imconsumer.ImMessagePush.prototype.setSenduserheadurl = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string toUserId = 5;
 * @return {string}
 */
proto.com.ht.imconsumer.ImMessagePush.prototype.getTouserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.ht.imconsumer.ImMessagePush} returns this
 */
proto.com.ht.imconsumer.ImMessagePush.prototype.setTouserid = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string toUserName = 6;
 * @return {string}
 */
proto.com.ht.imconsumer.ImMessagePush.prototype.getTousername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.ht.imconsumer.ImMessagePush} returns this
 */
proto.com.ht.imconsumer.ImMessagePush.prototype.setTousername = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string toUserHeadUrl = 7;
 * @return {string}
 */
proto.com.ht.imconsumer.ImMessagePush.prototype.getTouserheadurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.ht.imconsumer.ImMessagePush} returns this
 */
proto.com.ht.imconsumer.ImMessagePush.prototype.setTouserheadurl = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional int32 targetType = 8;
 * @return {number}
 */
proto.com.ht.imconsumer.ImMessagePush.prototype.getTargettype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.ht.imconsumer.ImMessagePush} returns this
 */
proto.com.ht.imconsumer.ImMessagePush.prototype.setTargettype = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string targetId = 9;
 * @return {string}
 */
proto.com.ht.imconsumer.ImMessagePush.prototype.getTargetid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.ht.imconsumer.ImMessagePush} returns this
 */
proto.com.ht.imconsumer.ImMessagePush.prototype.setTargetid = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string content = 10;
 * @return {string}
 */
proto.com.ht.imconsumer.ImMessagePush.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.ht.imconsumer.ImMessagePush} returns this
 */
proto.com.ht.imconsumer.ImMessagePush.prototype.setContent = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional int32 messageType = 11;
 * @return {number}
 */
proto.com.ht.imconsumer.ImMessagePush.prototype.getMessagetype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.ht.imconsumer.ImMessagePush} returns this
 */
proto.com.ht.imconsumer.ImMessagePush.prototype.setMessagetype = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional string sendTimeStamp = 12;
 * @return {string}
 */
proto.com.ht.imconsumer.ImMessagePush.prototype.getSendtimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.ht.imconsumer.ImMessagePush} returns this
 */
proto.com.ht.imconsumer.ImMessagePush.prototype.setSendtimestamp = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.ht.imconsumer.ImMessageAck.prototype.toObject = function(opt_includeInstance) {
  return proto.com.ht.imconsumer.ImMessageAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.ht.imconsumer.ImMessageAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.ht.imconsumer.ImMessageAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.ht.imconsumer.ImMessageAck}
 */
proto.com.ht.imconsumer.ImMessageAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.ht.imconsumer.ImMessageAck;
  return proto.com.ht.imconsumer.ImMessageAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.ht.imconsumer.ImMessageAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.ht.imconsumer.ImMessageAck}
 */
proto.com.ht.imconsumer.ImMessageAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.ht.imconsumer.ImMessageAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.ht.imconsumer.ImMessageAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.ht.imconsumer.ImMessageAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.ht.imconsumer.ImMessageAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.com.ht.imconsumer.ImMessageAck.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.ht.imconsumer.ImMessageAck} returns this
 */
proto.com.ht.imconsumer.ImMessageAck.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.ht.imconsumer.ImMessagePull.prototype.toObject = function(opt_includeInstance) {
  return proto.com.ht.imconsumer.ImMessagePull.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.ht.imconsumer.ImMessagePull} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.ht.imconsumer.ImMessagePull.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.ht.imconsumer.ImMessagePull}
 */
proto.com.ht.imconsumer.ImMessagePull.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.ht.imconsumer.ImMessagePull;
  return proto.com.ht.imconsumer.ImMessagePull.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.ht.imconsumer.ImMessagePull} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.ht.imconsumer.ImMessagePull}
 */
proto.com.ht.imconsumer.ImMessagePull.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.ht.imconsumer.ImMessagePull.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.ht.imconsumer.ImMessagePull.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.ht.imconsumer.ImMessagePull} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.ht.imconsumer.ImMessagePull.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string userId = 1;
 * @return {string}
 */
proto.com.ht.imconsumer.ImMessagePull.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.ht.imconsumer.ImMessagePull} returns this
 */
proto.com.ht.imconsumer.ImMessagePull.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.ht.imconsumer.ImMessageToQueue.prototype.toObject = function(opt_includeInstance) {
  return proto.com.ht.imconsumer.ImMessageToQueue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.ht.imconsumer.ImMessageToQueue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.ht.imconsumer.ImMessageToQueue.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    senduserid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sendmessageid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    targettype: jspb.Message.getFieldWithDefault(msg, 4, 0),
    targetid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    content: jspb.Message.getFieldWithDefault(msg, 8, ""),
    messagetype: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.ht.imconsumer.ImMessageToQueue}
 */
proto.com.ht.imconsumer.ImMessageToQueue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.ht.imconsumer.ImMessageToQueue;
  return proto.com.ht.imconsumer.ImMessageToQueue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.ht.imconsumer.ImMessageToQueue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.ht.imconsumer.ImMessageToQueue}
 */
proto.com.ht.imconsumer.ImMessageToQueue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSenduserid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSendmessageid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTargettype(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetid(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMessagetype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.ht.imconsumer.ImMessageToQueue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.ht.imconsumer.ImMessageToQueue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.ht.imconsumer.ImMessageToQueue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.ht.imconsumer.ImMessageToQueue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSenduserid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSendmessageid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTargettype();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getTargetid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getMessagetype();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.com.ht.imconsumer.ImMessageToQueue.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.ht.imconsumer.ImMessageToQueue} returns this
 */
proto.com.ht.imconsumer.ImMessageToQueue.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string sendUserId = 2;
 * @return {string}
 */
proto.com.ht.imconsumer.ImMessageToQueue.prototype.getSenduserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.ht.imconsumer.ImMessageToQueue} returns this
 */
proto.com.ht.imconsumer.ImMessageToQueue.prototype.setSenduserid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string sendMessageId = 3;
 * @return {string}
 */
proto.com.ht.imconsumer.ImMessageToQueue.prototype.getSendmessageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.ht.imconsumer.ImMessageToQueue} returns this
 */
proto.com.ht.imconsumer.ImMessageToQueue.prototype.setSendmessageid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 targetType = 4;
 * @return {number}
 */
proto.com.ht.imconsumer.ImMessageToQueue.prototype.getTargettype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.ht.imconsumer.ImMessageToQueue} returns this
 */
proto.com.ht.imconsumer.ImMessageToQueue.prototype.setTargettype = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string targetId = 5;
 * @return {string}
 */
proto.com.ht.imconsumer.ImMessageToQueue.prototype.getTargetid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.ht.imconsumer.ImMessageToQueue} returns this
 */
proto.com.ht.imconsumer.ImMessageToQueue.prototype.setTargetid = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string content = 8;
 * @return {string}
 */
proto.com.ht.imconsumer.ImMessageToQueue.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.ht.imconsumer.ImMessageToQueue} returns this
 */
proto.com.ht.imconsumer.ImMessageToQueue.prototype.setContent = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional int32 messageType = 9;
 * @return {number}
 */
proto.com.ht.imconsumer.ImMessageToQueue.prototype.getMessagetype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.ht.imconsumer.ImMessageToQueue} returns this
 */
proto.com.ht.imconsumer.ImMessageToQueue.prototype.setMessagetype = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


goog.object.extend(exports, proto.com.ht.imconsumer);
